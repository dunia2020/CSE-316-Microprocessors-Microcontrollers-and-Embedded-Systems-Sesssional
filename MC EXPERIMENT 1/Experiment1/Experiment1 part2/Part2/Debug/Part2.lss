
Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000156  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000063f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059e  00000000  00000000  00000823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000285  00000000  00000000  00000dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000337  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA=0b11111111;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	
	DDRB=0b00000000;
  80:	17 ba       	out	0x17, r1	; 23
	PORTA=ch;
  82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  86:	8b bb       	out	0x1b, r24	; 27
	_delay_ms(100);
	
	}
	if(PINB&0b00010000){
		if(ch==0){
		ch=16;
  88:	90 e1       	ldi	r25, 0x10	; 16
	DDRB=0b00000000;
	PORTA=ch;

    while (1) 
    {
	if(PINB&0b00001000){
  8a:	b3 9b       	sbis	0x16, 3	; 22
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <main+0x38>

	ch++;
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  92:	8f 5f       	subi	r24, 0xFF	; 255
	if(ch==16){
  94:	80 31       	cpi	r24, 0x10	; 16
  96:	19 f0       	breq	.+6      	; 0x9e <main+0x22>

    while (1) 
    {
	if(PINB&0b00001000){

	ch++;
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x26>
	if(ch==16){
	ch=0;
  9e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	PORTA=ch;
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e7 ea       	ldi	r30, 0xA7	; 167
  aa:	f1 e6       	ldi	r31, 0x61	; 97
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x30>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x36>
  b2:	00 00       	nop
	_delay_ms(100);
	
	}
	if(PINB&0b00010000){
  b4:	b4 9b       	sbis	0x16, 4	; 22
  b6:	e9 cf       	rjmp	.-46     	; 0x8a <main+0xe>
		if(ch==0){
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  bc:	81 11       	cpse	r24, r1
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x48>
		ch=16;
  c0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
		}
		ch--;
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c8:	81 50       	subi	r24, 0x01	; 1
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		
		PORTA=ch;
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	e7 ea       	ldi	r30, 0xA7	; 167
  d2:	f1 e6       	ldi	r31, 0x61	; 97
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x58>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5e>
  da:	00 00       	nop
  dc:	d6 cf       	rjmp	.-84     	; 0x8a <main+0xe>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
