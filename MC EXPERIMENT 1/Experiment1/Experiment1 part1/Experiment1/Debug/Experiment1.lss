
Experiment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000066f  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000591  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b4  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000359  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013c  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 91 00 	call	0x122	; 0x122 <main>
  74:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>

volatile unsigned char ch=0;

ISR(INT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	ch++;
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(ch==16){
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  9a:	80 31       	cpi	r24, 0x10	; 16
  9c:	11 f4       	brne	.+4      	; 0xa2 <__vector_1+0x26>
	ch=0;
  9e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	PORTA=ch;
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e9       	ldi	r18, 0x9F	; 159
  aa:	86 e8       	ldi	r24, 0x86	; 134
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <__vector_1+0x32>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <__vector_1+0x3c>
  b8:	00 00       	nop
	_delay_ms(500);	
	GIFR = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a bf       	out	0x3a, r24	; 58
	
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_3>:

ISR(INT2_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	if(ch==0){
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e2:	81 11       	cpse	r24, r1
  e4:	03 c0       	rjmp	.+6      	; 0xec <__vector_3+0x1e>
		ch=16;
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
	ch--;
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTA=ch;
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	2f e9       	ldi	r18, 0x9F	; 159
  fe:	86 e8       	ldi	r24, 0x86	; 134
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <__vector_3+0x34>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__vector_3+0x3e>
 10c:	00 00       	nop
	_delay_ms(500);
	GIFR = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8a bf       	out	0x3a, r24	; 58
	
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA=0b00001111;
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	8a bb       	out	0x1a, r24	; 26
	PORTA=0;
 126:	1b ba       	out	0x1b, r1	; 27

	

	GICR=(GICR|0b01100000); //active INT2 AND INT0
 128:	8b b7       	in	r24, 0x3b	; 59
 12a:	80 66       	ori	r24, 0x60	; 96
 12c:	8b bf       	out	0x3b, r24	; 59
	//MCUCR=(MCUCR&0b11110000); // Program INT1_vect for low state

	//MCUCR=(MCUCR&0b11111110); // Program INT0_vect for low state
	MCUCR=(MCUCR|(1<<1));
 12e:	85 b7       	in	r24, 0x35	; 53
 130:	82 60       	ori	r24, 0x02	; 2
 132:	85 bf       	out	0x35, r24	; 53
	//MCUCSR=(MCUCSR&0b10111111);  // Program INT2_vect for falling state
	sei();
 134:	78 94       	sei
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x14>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
